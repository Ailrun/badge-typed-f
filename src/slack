#!/usr/bin/env node

const path = require('path');
const process = require('process');

const express = require('express');
const request = require('superagent');
const queryString = require('query-string');

const slackUrl = 'https://typed-f.slack.com/';
const makeSlackAPIUrl = function () {
  return slackUrl + 'api/' + [].join.call(arguments, '/');
};

const router = module.exports = express.Router();

router.get('/badge.svg', async function (req, res) {
  const members = await getMembers();
  const users = members.filter(isUser);

  const total = users.length;
  const active = (await getPresences(users)).filter(isActive).length;

  const query = queryString.stringify(req.query);
  const badge = await getBadge({ active, total, query });

  res.set('Content-Type', 'image/svg+xml');
  res.send(badge);
});

router.get('/welcome', async function (req, res) {
  const members = await getMembers();
  const users = members.filter(isUser);

  const total = users.length;
  const active = (await getPresences(users)).filter(isActive).length;

  res.render(path.join(__dirname, './templates/slack/welcome.pug'), {
    active,
    total,
    recaptchaKey: process.env.GOOGLE_RECAPTCHA_SITEKEY,
  });
});

router.post('/invite', async function (req, res) {
  const email = req.body.email;
  const recaptchaResponse = req.body.recaptchaResponse;

  let invitationResult;

  try {
    const recaptchaStatus = await getRecaptchaStatus({
      remoteip: req.connection.remoteAddress,
      recaptchaResponse,
    });

    if (!recaptchaStatus) {
      throw new Error('Recaptcha check failed');
    }

    invitationResult = await postInvitation({ email });
  } catch (e) {
    return res.status(400).send({ message: e.message });
  }

  if (!invitationResult) {
    return res.send({ slackLink: slackUrl, message: 'Now we are going to Slack...' });
  }

  return res.send({ message: 'Please check your email! '});
});

router.use(express.static(path.join(__dirname, './public/slack/')));

async function postInvitation({ email }) {
  const response = await request.get(makeSlackAPIUrl(`users.admin.invite`))
    .query({ email })
    .set('Authorization', 'Bearer ' + process.env.SLACK_WORKSPACE_TOKEN);

  if (response.status != 200) {
    throw new Error(`Response with invalid status ${response.status}`);
  }

  const { ok, error } = response.body;

  if (!ok) {
    if (error === 'already_invited') {
      throw new Error('You have already been invited to Slack. Check for an email from feedback@slack.com.');
    } else if (error === 'already_in_team') {
      return false;
    } else {
      throw new Error(error);
    }
  }

  return true;
}

async function getRecaptchaStatus({ remoteip, recaptchaResponse }) {
  const response = await request.post('https://www.google.com/recaptcha/api/siteverify')
    .type('form')
    .send({
      secret: process.env.GOOGLE_RECAPTCHA_SECRETKEY,
      response: recaptchaResponse,
      remoteip,
    });

  return response.body.success;
}

async function getMembers() {
  const response = await request(makeSlackAPIUrl('users.list'))
    .set('Authorization', 'Bearer ' + process.env.SLACK_WORKSPACE_TOKEN);

  return response.body.members;
}

async function getPresences(users) {
  const responses = await Promise.all(users.map(({ id }) => {
    return request(makeSlackAPIUrl('users.getPresence'))
      .query({ user: id })
      .set('Authorization', 'Bearer ' + process.env.SLACK_WORKSPACE_TOKEN);
  }));

  return responses.map((response) => response.body.presence);
}

async function getBadge({ active, total, query }) {
  const response = await request(`https://img.shields.io/badge/slack-${active}%2F${total}-hotpink.svg?${query}`);

  return response.body;
}

function isUser(member) {
  return member.id !== 'USLACKBOT' &&
    !member.is_bot &&
    !member.deleted;
}

function isActive(presence) {
  return presence === 'active';
}
